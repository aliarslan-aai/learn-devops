---------------------
LINUX CORE CONCEPTS
---------------------
Linux Kernel:
-------------
Kernel: core interface b/w hardware and applications/processes

responsible for:
    mem mngmnt
    process mngment
    device drivers
    sys calls and security

linux kernel is monolithic
- carries out cpu schedualing, mem mngment by itself
minux kernel is modular
- need more info ???

uname: kernel
uname -r: kernel version

Mem Mngmnt:
divided into two:
- kernel space
    the space it uses to execute & provide its services
    a process running in kernel has unrestricted access to h/w
- user space
    applications. e.g. progs written in C++, java, Go
    user apps make requests to kernel for h/w access
        - open a file
        - write a file
        - list processes
        - define a variable

Working with hardware:
------------------------
dmesg: read sys logs generated by h/w
udevadm
lspci
lsblk
lscpu
lsmem
lsmem --summary
free -m
lshw

* total physical cores = Threads per core x Cores per socket

Linux boot Sequence:
----------------------
Process has 4 steps:
1. BIOS POST
    power on self-test
    - ensures h/w components attached to device are functioning properly
2. Boot Loader (GRUB2)
    loads & excecutes the boot device - located in first sector of boot device
    - in linux, in the /boot
3. Kernel Initialization
    after the selected kernel is loaded into the memory
    it is generally decompressed, then loaded to memory
    and starts processesing such as harward and mem mngmnt tasks
4. INIT Process (systemd)
    sets ups the user space & the processes needed in the user env
    then calls systemd deamon
    - this systemd is responsible for bringing linux host to a usable state
    - responsible for mounting file systems
    - starting & managing system services
    - to see which INIT process is used: ls -l /sbin/init

Runlevels
-----------
5 -> graphical (display manager service enabled)
3 -> CLI (display manager service disabled)

runlevel -> display run level
systemctl get-default  : view systemd target
systemctl set-default multi-user.target  : change systemd target
other is graphical.target

FileTypes
-----------
everything is a file is file
there are three types:
1. Regular file - images script, configs, data
2. directory - stores other files within
3. special files - 5 sub categories
    1. Character Files - devices under /dev filesystem
            mouse, keyboard
    2. Block files - devices under /dev
        read from and writes to devices in block files
        hard disk, ram
    3. Links - associate 2 or more filenames to the same file data
        two types:
            soft/sym/symbolic link: pointers to another file
                like shortcuts in windows
                deleting a symlink does not delelte the block of data
            hard link: 2 or more filenames that share the same block of data
                deleting one link will delete the data
    4. Sockers Files - communication b/w two processes
    5. named pipes - allows connecting one process as an input to another process
        data flow is uni-directional from first process to the second
How to identify the file type?
    use the "file ARG" cmd
    ls -l ARG
        from the output look at the first character
            d - directory
            - - Regular
            c - character device
            l - link
            s - socket file
            p - pipe
            b - block device

Filesystem Hierarchy
----------------------
/home - for all users except root
/root - home for root user
/opt - 3rd party apps
/mnt - mount filesystems temporarily in the system
/tmp - used to store temporary data
/media - external media devices
    df -hP : prints info about all the mounted filesystems
/dev - character files
/bin - basic prog binaries, cp, mv, mkdir, date etc
/etc - !!! most of configs
/lib, /lib64 - shared libs
/usr - old systems for user home - modern systems all user apps data
/var - logs for system, also has cached data
